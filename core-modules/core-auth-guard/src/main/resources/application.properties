# Configuration for Application
%dev.quarkus.http.port=8081

# Configuration for Database
quarkus.datasource.devservices.enabled=true
quarkus.datasource.db-kind=postgresql
quarkus.datasource.devservices.db-name=coauth
quarkus.datasource.devservices.port=5432
#%dev.quarkus.hibernate-orm.log.sql=true
%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%dev.quarkus.datasource.devservices.username=${POSTGRESQL_USER}
%dev.quarkus.datasource.devservices.password=${POSTGRESQL_PASSWORD}
%dev.quarkus.hibernate-orm.sql-load-script=init.sql
quarkus.datasource.reactive.max-size=30
#####################
#%prod.quarkus.hibernate-orm.database.generation=update
#%prod.quarkus.hibernate-orm.sql-load-script=init.sql
%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://postgresql/coauth
%prod.quarkus.datasource.username=${POSTGRESQL_USER}
%prod.quarkus.datasource.password=${POSTGRESQL_PASSWORD}
%prod.quarkus.datasource.reactive.max-size=2

# Configuration for Infinispan
quarkus.infinispan-client.devservices.enabled=false
#%prod.quarkus.package.type=uber-jar

# Configuration for Co-Auth Auth Guard
%dev.coauth.core.auth-guard.refresh-api-keys.interval=10s
%prod.coauth.core.auth-guard.refresh-api-keys.interval=10s

# Logging
quarkus.application.name=core-auth-guard
quarkus.opentelemetry.enabled=true
quarkus.otel.exporter.otlp.traces.endpoint=${COAUTH_TRACER_ENDPOINT:http://localhost:4317}
quarkus.otel.exporter.otlp.traces.headers=authorization=Bearer ${COAUTH_TRACER_API_KEY:dev-secret}
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
